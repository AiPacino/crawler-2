<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-dataflow-parent</artifactId>
		<version>1.6.0.RELEASE</version>
	</parent>
	<artifactId>common-microservice-dataflow-server</artifactId>
	<properties>
		<!-- 文件拷贝时的编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- 编译时的版本 -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<docker.registry>10.167.211.250</docker.registry><!-- docker.registry的IP和端口 -->
		<docker.registry.name>crawler</docker.registry.name><!-- docker.registry的repo名字 -->
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-dataflow-server-local</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 如果将微服务放在docker容器内，以下是使用maven打包docker 镜像的配置 start -->
			<plugin>
				<!-- docker 打包maven插件的名称 groupId 和 artifactId -->
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<!-- docker 打包配置 -->
				<configuration>
					<!-- docker 创建镜像的名称 docker.registry是docker registry的IP， docker.registry.name 
						是在 docker registr 创建的repository 名称 project.artifactId 项目名称 project.version 
						版本 -->
					<!-- <imageName>${docker.registry}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName> -->
					<imageName>${docker.registry}/${docker.registry.name}/${project.artifactId}:${app.active}</imageName>
					<!-- dockerfile 的存放路径 -->
					<dockerDirectory>src/main/docker</dockerDirectory>
					<!-- docker 远程服务的ip和端口 (注：如果本机没有安装docker环境，可以使用远程已经安装并启动了dockerd服务来打包docker镜像) -->
					<dockerHost>http://10.167.211.250:2375</dockerHost>
					<!-- <dockerHost>http://10.167.202.170:2375</dockerHost> -->
					<dockerHost>http://10.167.211.250:2375</dockerHost>
					<!-- dockerCertPath 是在本地windows环境下安装docker环境相打包需要的安全认证 -->
					<!-- <dockerCertPath>C:\Users\Administrator\.docker\machine\machines\myharbor</dockerCertPath> -->
					<!-- 创建完docker image 后是否 push 到docker register，也可以在maven命令中用 -DpushImage 
						来替代 -->
					<pushImage>true</pushImage>
					<!-- docker resources 指定微服务jar的路径，将微服务的jar包部署到docker容器镜像中 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- docker 镜像的配置，serverId 和setting.xml 中的 server id 匹配(因为docker registry的登录名和密码比较敏感，因此配置在setting.xml中) -->
					<!-- <serverId>docker-hub</serverId> <registryUrl>https://index.docker.io/v1/</registryUrl> -->
					<serverId>harbor-prod</serverId>
					<registryUrl>${docker.registry}</registryUrl>
				</configuration>
			</plugin>
			<!-- 如果将微服务放在docker容器内，以下是使用maven打包docker 镜像的配置 end -->
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>

	<profiles>
		<profile> 			<!-- 本机开发环境 -->
			<id>dev</id>
			<properties>
				<app.active>dev</app.active>
				<app.dataflow.server.name>dataflow-server-local</app.dataflow.server.name>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile> 			<!-- 测试环境 -->
			<id>test</id>
			<properties>
				<app.active>test</app.active>
				<app.dataflow.server.name>dataflow-server</app.dataflow.server.name>
			</properties>
		</profile>
		<profile> 			<!-- 生产环境 -->
			<id>prod</id>
			<properties>
				<app.active>prod</app.active>
				<app.dataflow.server.name>dataflow-server</app.dataflow.server.name>
			</properties>
		</profile>
	</profiles>
</project>