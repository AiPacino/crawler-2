<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId> 
		<version>2.0.2.RELEASE</version>
	</parent>
	<groupId>com.sr.microservice</groupId>
	<artifactId>parent-microservice</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<properties>
		<!-- 文件拷贝时的编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- 编译时的版本 -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<docker.registry>10.167.211.250</docker.registry><!-- docker.registry的IP和端口 -->
		<docker.registry.name>crawler</docker.registry.name><!-- docker.registry的repo名字 -->
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Finchley.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency> 
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency> 
	</dependencies>
	<repositories>
		<repository>
			<id>mavencentral</id>
			<name>Maven Central</name>
			<url>https://repo1.maven.org/maven2/</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>spring-snapshots-local</id>
			<name>Spring Snapshots Local</name>
			<url>https://repo.spring.io/libs-snapshot-local</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/libs-release-local</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/libs-snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/libs-snapshot-local</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone-local</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<modules> 
	    <module>common-microservice-config</module>
		<module>common-microservice-eureka</module>
		<module>common-microservice-ocr</module>
		<module>common-microservice-springboot-ui</module>
		<module>common-microservice-sleuth</module>
		<module>common-microservice-client</module>
		<module>common-microservice-zipkin</module>
	    <module>common-microservice-oauth2server</module>
		<module>common-microservice-router</module>
		<module>parent-microservice-carrier</module>
		<module>parent-microservice-telecom</module>
<!-- 	    <module>parent-microservice-car-insurance</module>
		<module>parent-microservice-taxation</module>
		<module>parent-microservice-honesty</module>
		<module>parent-microservice-standalone</module>
		<module>parent-microservice-insurance</module>
		<module>parent-microservice-bank</module>
		<module>parent-microservice-e_commerce</module>
	    <module>parent-microservice-housingfund</module> -->
		
		<!--暂不需要 -->
		
		<!-- <module>parent-microservice-dataflow</module>
		<module>common-microservice-hystrix</module>  -->
		
	</modules>


	<build>
		<plugins>
			<!-- 如果将微服务放在docker容器内，以下是使用maven打包docker 镜像的配置 start -->
			<plugin>
				<!-- docker 打包maven插件的名称 groupId 和 artifactId -->
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<!-- docker 打包配置 -->
				<configuration>
					<!-- docker 创建镜像的名称 docker.registry是docker registry的IP， docker.registry.name 
						是在 docker registr 创建的repository 名称 project.artifactId 项目名称 project.version 
						版本 -->
					<!-- <imageName>${docker.registry}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName> -->
					<imageName>${docker.registry}/${docker.registry.name}/${project.artifactId}:${app.active}</imageName>
					<!-- dockerfile 的存放路径 -->
					<dockerDirectory>src/main/docker</dockerDirectory>
					<!-- docker 远程服务的ip和端口 (注：如果本机没有安装docker环境，可以使用远程已经安装并启动了dockerd服务来打包docker镜像) -->
					<dockerHost>http://10.167.211.250:2375</dockerHost>
					<!-- <dockerHost>http://10.167.202.170:2375</dockerHost> -->
					<!-- dockerCertPath 是在本地windows环境下安装docker环境相打包需要的安全认证 -->
					<!-- <dockerCertPath>C:\Users\Administrator\.docker\machine\machines\myharbor</dockerCertPath> -->
					<!-- 创建完docker image 后是否 push 到docker register，也可以在maven命令中用 -DpushImage 
						来替代 -->
					<pushImage>true</pushImage>
					<!-- docker resources 指定微服务jar的路径，将微服务的jar包部署到docker容器镜像中 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- docker 镜像的配置，serverId 和setting.xml 中的 server id 匹配(因为docker registry的登录名和密码比较敏感，因此配置在setting.xml中) -->
					<!-- <serverId>docker-hub</serverId> <registryUrl>https://index.docker.io/v1/</registryUrl> -->
					<serverId>harbor-prod</serverId>
					<registryUrl>${docker.registry}</registryUrl>
				</configuration>
			</plugin>
			<!-- 如果将微服务放在docker容器内，以下是使用maven打包docker 镜像的配置 end -->

		</plugins>
	</build>
	<profiles>
		<profile> 			<!-- 本机开发环境 -->
			<id>dev</id>
			<properties>
				<app.active>dev</app.active>
				<app.eureka.name>eurekaserver</app.eureka.name>
				<app.sleuth.name>zipkinserver-local</app.sleuth.name>
				<app.zipkines.name>zipkinserver-local</app.zipkines.name>
				<app.webmanage.name>webmanage-local</app.webmanage.name>
				<app.h5jd.name>Ecommerce-JingDong-h5-local</app.h5jd.name>
				<app.h5taobao.name>Ecommerce-TaoBao-h5-local</app.h5taobao.name>
				<app.bankh5.name>bank-h5-local</app.bankh5.name>
				<app.h5sn.name>Ecommerce-SuNing-h5-local</app.h5sn.name>
				<app.h5fund.name>housingfund-h5-local</app.h5fund.name>
				<app.oauth2server.name>oauth2server-local</app.oauth2server.name>
				<app.router.name>api-router-local</app.router.name>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile> 			<!-- 测试环境 -->
			<id>test</id>
			<properties>
				<app.active>test</app.active>
				<app.eureka.name>eurekaserver</app.eureka.name>
				<app.sleuth.name>zipkinserver</app.sleuth.name>
				<app.zipkines.name>zipkinserver</app.zipkines.name>
				<app.webmanage.name>webmanage</app.webmanage.name>
				<app.h5jd.name>Ecommerce-JingDong-h5</app.h5jd.name>
				<app.h5taobao.name>Ecommerce-TaoBao-h5</app.h5taobao.name>
				<app.bankh5.name>bank-h5</app.bankh5.name>
				<app.h5sn.name>Ecommerce-SuNing-h5</app.h5sn.name>
				<app.h5fund.name>housingfund-h5</app.h5fund.name>
				<app.oauth2server.name>oauth2server</app.oauth2server.name>
				<app.router.name>api-router</app.router.name>
			</properties>
		</profile>
		<profile> 			<!-- 生产环境 -->
			<id>prod</id>
			<properties>
				<app.active>prod</app.active>
				<app.eureka.name>eurekaserver</app.eureka.name>
				<app.sleuth.name>zipkinserver</app.sleuth.name>
				<app.zipkines.name>zipkinserver</app.zipkines.name>
				<app.webmanage.name>webmanage</app.webmanage.name>
				<app.h5jd.name>Ecommerce-JingDong-h5</app.h5jd.name>
				<app.h5taobao.name>Ecommerce-TaoBao-h5</app.h5taobao.name>
				<app.bankh5.name>bank-h5</app.bankh5.name>
				<app.h5sn.name>Ecommerce-SuNing-h5</app.h5sn.name>
				<app.h5fund.name>housingfund-h5</app.h5fund.name>
				<app.oauth2server.name>oauth2server</app.oauth2server.name>
				<app.router.name>api-router</app.router.name>
			</properties>
		</profile>
		<profile> 			<!-- 生产环境 -->
			<id>preview1.1.2</id>
			<properties>
				<app.active>preview1.1.2</app.active>
				<app.eureka.name>eurekaserver</app.eureka.name>
				<app.sleuth.name>zipkinserver</app.sleuth.name>
				<app.zipkines.name>zipkinserver</app.zipkines.name>
				<app.webmanage.name>webmanage</app.webmanage.name>
				<app.h5jd.name>Ecommerce-JingDong-h5</app.h5jd.name>
				<app.h5taobao.name>Ecommerce-TaoBao-h5</app.h5taobao.name>
				<app.bankh5.name>bank-h5</app.bankh5.name>
				<app.h5sn.name>Ecommerce-SuNing-h5</app.h5sn.name>
				<app.h5fund.name>housingfund-h5</app.h5fund.name>
				<app.oauth2server.name>oauth2server</app.oauth2server.name>
				<app.router.name>api-router</app.router.name>
				<!-- <docker.registry>index.docker.io</docker.registry> --><!-- docker.registry的IP和端口 -->
				<!-- <docker.registry.name>meidi</docker.registry.name> --><!-- docker.registry的repo名字 -->
				<!-- <serverId>docker-hub</serverId> --><!-- setting.xml 中对应dockerhub的账号密码，在push docker images 需要认证-->
			</properties>
		</profile>
	</profiles>
</project>
