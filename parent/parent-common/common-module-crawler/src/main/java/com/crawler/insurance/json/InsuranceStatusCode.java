package com.crawler.insurance.json;

public enum InsuranceStatusCode {
	
	INSURANCE_LOGIN_DOING("正在登录。。。。","LOGIN","DOING",100),
	INSURANCE_LOGIN_PWD_ERROR("输入的密码验证错误！","LOGIN","ERROR",101),
	INSURANCE_LOGIN_CAPTCHA_ERROR("图片验证码有误！","LOGIN","ERROR",102),
	INSURANCE_LOGIN_SMS_ERROR("短信验证码错误！","LOGIN","ERROR",101),
	INSURANCE_LOGIN_IDNUM_ERROR("请输入合法的身份证号码","LOGIN","ERROR",103),
	INSURANCE_LOGIN_NOTFIND_ERROR("查不到用户信息，请先注册！","LOGIN","ERROR",103),
	INSURANCE_LOGIN_CARD_MISMATCHING_SOCIAL_ERROR("社保卡号与身份证号码不匹配,请检查","LOGIN","ERROR",103),
	INSURANCE_LOGIN_IDNUMORPWD_ERROR("输入的账号或密码错误！","LOGIN","ERROR",104),
	INSURANCE_LOGIN_SUCCESS("登录成功！","LOGIN","SUCCESS",200),
	INSURANCE_LOGIN_TIMEOUT("连接超时！","LOGIN","ERROR",104),
	INSURANCE_LOGIN_EXCEPTION("登录时发生异常！","LOGIN","ERROR",999),
	INSURANCE_LOGIN_IDNUM_NOTEXIST("社会保障号码错误或尚未制卡","LOGIN","ERROR",104),
	INSURANCE_LOGIN_IDNUM_NOTDATA("根据身份证号 查不出任何记录","LOGIN","ERROR",105),
	INSURANCE_LOGIN_IDNUMLOGINTYPENOTFIT_ERROR("所选登录类型与所输账号信息不符合,请核实！","LOGIN","ERROR",108),

	INSURANCE_LOGIN_VALIDATE_DOING("校验信息中并准备发送短信...","VALIDATE","DOING",109),
	INSURANCE_LOGIN_VALIDATE_SUCCESS("校验信息成功，短信已发送，请注意查收！","VALIDATE","SUCCESS",110),
	INSURANCE_LOGIN_VALIDATE_FAILUE("短信发送失败！","VALIDATE","FAILUE",110),
	
	INSURANCE_SMS_SEND_DOING("短信验证码发送中...","SMS_SEND","DOING",200),//yl 2018.7.23
	INSURANCE_SMS_VALIDATE_DOING("短信验证码验证中...","SMS_VALIDATE","DOING",200),
	INSURANCE_SMS_VALIDATE_SUCCESS("短信验证码验证成功！","SMS_VALIDATE","SUCCESS",200),
	INSURANCE_SMS_VALIDATE_FAILUE("短信验证码验证失败！","SMS_VALIDATE","FAILUE",200),
	
	INSURANCE_CRAWLER_CHECK_ERROR("未获取到爬取任务(TaskId)!","CRAWLER","CHECK",400),
	INSURANCE_CRAWLER_DOING("正在采集数据。。。","CRAWLER","DOING",100),
	INSURANCE_CRAWLER_SUCCESS("数据采集成功！","CRAWLER","SUCCESS",200),
	INSURANCE_LOGIN_MAINTAIN_ERROR("系统维护中，暂停服务","LOGIN","ERROR",106),
	
	INSURANCE_CRAWLER_ALL_SUCCESS("数据采集成功！","CRAWLER","SUCCESS",200),
	INSURANCE_CRAWLER_USER_MSG_SUCCESS("数据采集中，【个人信息】已采集完成","CRAWLER_USER_MSG","SUCCESS",0),
	INSURANCE_CRAWLER_YANGLAO_MSG_SUCCESS("数据采集中，【养老保险信息】已采集完成","CRAWLER_YANGLAO_MSG","SUCCESS",0),
	INSURANCE_CRAWLER_SHIYE_MSG_SUCCESS("数据采集中，【失业保险信息】已采集完成","CRAWLER_SHIYE_MSG","SUCCESS",0),
	INSURANCE_CRAWLER_SHENGYU_MSG_SUCCESS("数据采集中，【生育保险信息】已采集完成","CRAWLER_SHENGYU_MSG","SUCCESS",0),
	INSURANCE_CRAWLER_YILIAO_MSG_SUCCESS("数据采集中，【医疗保险信息】已采集完成","CRAWLER_YILIAO_MSG","SUCCESS",0),
	INSURANCE_CRAWLER_GONGSHANG_MSG_SUCCESS("数据采集中，【工伤保险信息】已采集完成","CRAWLER_GONGSHANG_MSG","SUCCESS",0),
	
	INSURANCE_CRAWLER_ACCOUNT_MSG_SUCCESS("数据采集中，【个人账户信息】已采集完成","CRAWLER_USER_MSG","SUCCESS",0),
	INSURANCE_CRAWLER_BASE_INFO_SUCCESS("基本信息数据采集成功","CRAWLER_BASE_INFO","SUCCESS",200),
	INSURANCE_CRAWLER_BASE_INFO_FAILUE("基本信息数据采集失败","CRAWLER_BASE_INFO","FAILUE",300),
	INSURANCE_PARSER_BASE_INFO_SUCCESS("基本信息数据解析成功","PARSER_BASE_INFO","SUCCESS",200),
	INSURANCE_PARSER_BASE_INFO_FAILUE("基本信息数据解析失败","PARSER_BASE_INFO","FAILUE",300),
	
	INSURANCE_CRAWLER_AGED_SUCCESS("养老保险数据采集成功","CRAWLER_AGED","SUCCESS",200),
	INSURANCE_CRAWLER_AGED_FAILUE("养老保险数据采集失败","CRAWLER_AGED","FAILUE",300),
	INSURANCE_PARSER_AGED_SUCCESS("养老保险数据解析成功","PARSER_AGED","SUCCESS",200),
	INSURANCE_PARSER_AGED_FAILUE("养老保险数据解析失败","PARSER_AGED","FAILUE",300),
	
	INSURANCE_CRAWLER_MEDICAL_SUCCESS("医疗保险数据采集成功","CRAWLER_MEDICAL","SUCCESS",200),
	INSURANCE_CRAWLER_MEDICAL_FAILUE("医疗保险数据采集失败","CRAWLER_MEDICAL","FAILUE",300),
	INSURANCE_PARSER_MEDICAL_SUCCESS("医疗保险数据解析成功","PARSER_MEDICAL","SUCCESS",200),
	INSURANCE_PARSER_MEDICAL_FAILUE("医疗保险数据解析失败","PARSER_MEDICAL","FAILUE",300),
	
	INSURANCE_CRAWLER_INJURY_SUCCESS("工伤保险数据采集成功","CRAWLER_INJURY","SUCCESS",200),
	INSURANCE_CRAWLER_INJURY_FAILUE("工伤保险数据采集失败","CRAWLER_INJURY","FAILUE",300),
	INSURANCE_PARSER_INJURY_SUCCESS("工伤保险数据解析成功","PARSER_INJURY","SUCCESS",200),
	INSURANCE_PARSER_INJURY_FAILUE("工伤保险数据解析失败","PARSER_INJURY","FAILUE",300),
	
	INSURANCE_CRAWLER_UNEMPLOYMENT_SUCCESS("失业保险数据采集成功","CRAWLER_UNEMPLOYMENT","SUCCESS",200),
	INSURANCE_CRAWLER_UNEMPLOYMENT_FAILUE("失业保险数据采集失败","CRAWLER_UNEMPLOYMENT","FAILUE",300),
	INSURANCE_PARSER_UNEMPLOYMENT_SUCCESS("失业保险数据解析成功","PARSER_UNEMPLOYMENT","SUCCESS",200),
	INSURANCE_PARSER_UNEMPLOYMENT_FAILUE("失业保险数据解析失败","PARSER_UNEMPLOYMENT","FAILUE",300),
	
	INSURANCE_CRAWLER_MATERNITY_SUCCESS("生育保险数据采集成功","CRAWLER_MATERNITY","SUCCESS",200),
	INSURANCE_CRAWLER_MATERNITY_FAILUE("生育保险数据采集失败","CRAWLER_MATERNITY","FAILUE",300),
	INSURANCE_PARSER_MATERNITY_SUCCESS("生育保险数据解析成功","PARSER_MATERNITY","SUCCESS",200),
	INSURANCE_PARSER_MATERNITY_FAILUE("生育保险数据解析失败","PARSER_MATERNITY","FAILUE",300),
	INSURANCE_CRAWLER_MATERNITY_NOT_FOUND("生育保险数据采集完成,无数据","CRAWLER_MATERNITY","SUCCESS",201),
	
	INSURANCE_CRAWLER_MONEY_SUCCESS("职工大额数据采集成功","CRAWLER_MATERNITY","SUCCESS",200),
	INSURANCE_CRAWLER_MONEY_FAILUE("职工大额数据采集失败","CRAWLER_MATERNITY","FAILUE",300),
	INSURANCE_PARSER_MONEY_SUCCESS("职工大额数据解析成功","PARSER_MATERNITY","SUCCESS",200),
	INSURANCE_PARSER_MONEY_FAILUE("职工大额数据解析失败","PARSER_MATERNITY","FAILUE",300),

	INSURANCE_CRAWLER_FIVE_SUCCESS("厦门五险数据采集成功","CRAWLER_MATERNITY","SUCCESS",200),
	INSURANCE_CRAWLER_FIVE_FAILUE("厦门五险数据采集失败","CRAWLER_MATERNITY","FAILUE",300),
	INSURANCE_PARSER_FIVE_SUCCESS("厦门五险数据解析成功","PARSER_MATERNITY","SUCCESS",200),
	INSURANCE_PARSER_FIVE_FAILUE("厦门五险数据解析失败","PARSER_MATERNITY","FAILUE",300),

	INSURANCE_CRAWLER_FIVE_DETAILS_SUCCESS("厦门五险详细数据采集成功","CRAWLER_MATERNITY","SUCCESS",200),
	INSURANCE_CRAWLER_FIVE_DETAILS_FAILUE("厦门五险详细数据采集失败","CRAWLER_MATERNITY","FAILUE",300),
	INSURANCE_PARSER_FIVE_DETAILS_SUCCESS("厦门五险详细数据解析成功","PARSER_MATERNITY","SUCCESS",200),
	INSURANCE_PARSER_FIVE_DETAILS_FAILUE("厦门五险详细数据解析失败","PARSER_MATERNITY","FAILUE",300),
	
	//广州社保异地登录需要短信，添加此枚举判断是否需要发送短信
	INSURANCE_HAVESMSCODE_YES("需要发送短信","SMS","SUCCESS",200),
	INSURANCE_HAVESMSCODE_NO("不需要发送短信","SMS","FAILUE",200),
	
	//Agent中间层
	INSURANCE_AGENT_ERROR("系统繁忙，请稍后再试","AGENT","ERROR",404),
	
	//系统自动退出
    SYSTEM_QUIT("系统超时请重试", "SYSTEM", "QUIT", -1);
	
	
	

	
	private String description;
	
	private String phase;
	
	private String phasestatus;//步骤状态
	
	private Integer error_code;
	
    public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getPhase() {
		return phase;
	}

	public void setPhase(String phase) {
		this.phase = phase;
	}

	public String getPhasestatus() {
		return phasestatus;
	}

	public void setPhasestatus(String phasestatus) {
		this.phasestatus = phasestatus;
	}

	public Integer getError_code() {
		return error_code;
	}

	public void setError_code(Integer error_code) {
		this.error_code = error_code;
	}

	private InsuranceStatusCode(String description,String phase, String phasestatus,Integer error_code) {
		this.description = description;
		this.phase = phase;
		this.phasestatus = phasestatus;
		this.error_code = error_code;
	}
	

}
